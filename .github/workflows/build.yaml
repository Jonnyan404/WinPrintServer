name: Build WinPrintServer

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1

    # 恢复 NuGet 包（包括 .NET Framework 4.0 引用程序集）
    - name: Restore NuGet packages
      run: |
        nuget restore WinPrintServerUI/WinPrintServerUI.sln

    # 先编译 DLL
    - name: Build DLL and exe Release x64
      run: |
        msbuild WinPrintServer.sln /p:Configuration=ReleaseDLL /p:Platform=x64
        msbuild WinPrintServer.sln /p:Configuration=Release /p:Platform=x64

    - name: Build DLL and exe Release x86
      run: |
        msbuild WinPrintServer.sln /p:Configuration=ReleaseDLL /p:Platform=x86
        msbuild WinPrintServer.sln /p:Configuration=Release /p:Platform=x86
    # 编译 UI
    - name: Build UI Release x64
      run: |
        msbuild WinPrintServerUI/WinPrintServerUI.sln /p:Configuration=Release /p:Platform=x64

    - name: Build UI Release x86
      run: |
        msbuild WinPrintServerUI/WinPrintServerUI.sln /p:Configuration=Release /p:Platform=x86

    - name: Create release packages
      shell: pwsh
      run: |
        # 创建发布目录
        New-Item -ItemType Directory -Force -Path ./release-x64
        New-Item -ItemType Directory -Force -Path ./release-x86
        
        # 复制 x64 文件（UI 已经包含了 DLL）
        Copy-Item -Path "x64/Release/WinPrintServer.exe" -Destination "./release-x64/"
        Copy-Item -Path "WinPrintServerUI/WinPrintServerUI/bin/x64/Release/*" -Destination "./release-x64/" -Recurse
        
        # 复制 x86 文件（UI 已经包含了 DLL）
        Copy-Item -Path "Release/WinPrintServer32.exe" -Destination "./release-x86/"
        Copy-Item -Path "WinPrintServerUI/WinPrintServerUI/bin/x86/Release/*" -Destination "./release-x86/" -Recurse
        
        # 创建 README
        @"
        WinPrintServer ${{ github.ref_name }}
        
        📦 This package contains:
        - WinPrintServerUI.exe: 🖥️ Graphical user interface (RECOMMENDED)
        - WinPrintServer.exe: 💻 Command-line print server
        
        🚀 Quick Start:
        Just run WinPrintServerUI.exe - all dependencies included!
        
        ✨ Features:
        - Multi-instance support: Run multiple servers on different ports
        - Real-time logging with filtering
        - Easy printer selection
        
        📖 For more information: https://github.com/${{ github.repository }}
        "@ | Out-File -FilePath "./release-x64/README.txt" -Encoding UTF8
        
        Copy-Item -Path "./release-x64/README.txt" -Destination "./release-x86/"
        
        # 创建压缩包（带版本号）
        Compress-Archive -Path "./release-x64/*" -DestinationPath "WinPrintServer-${{ github.ref_name }}-x64.zip"
        Compress-Archive -Path "./release-x86/*" -DestinationPath "WinPrintServer-${{ github.ref_name }}-x86.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WinPrintServer-binaries
        path: |
          WinPrintServer-${{ github.ref_name }}-x64.zip
          WinPrintServer-${{ github.ref_name }}-x86.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: WinPrintServer-binaries
        path: ./artifacts

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/WinPrintServer-${{ github.ref_name }}-x64.zip
          ./artifacts/WinPrintServer-${{ github.ref_name }}-x86.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}